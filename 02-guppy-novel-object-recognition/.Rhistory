#### Reading in Data
my.data <- read.csv('/Users/wyatttoure/Documents/msc-projects/msc-projects/project-1-novel-object-recognition/novel-object-recognition-data.csv')
# Chunk 1: library-prep
library(PNWColors)
library(lme4)
library(tidyr)
library(lmerTest)
library(ggplot2)
library(ggpubr)
library(DHARMa)
library(dplyr)
library(effects)
library(broom)
library(broom.mixed)
library(knitr)
library(cowplot)
source("R/format-p-value.R")
source("R/rename-lme4-model.R")
# Chunk 2: data-prep
#### Reading in Data
my.data <- read.csv("data/novel-object-recognition-data.csv")
# Creating new variables
my.data <- my.data %>% mutate(time.with.novel.object = (case_when(
novel.side == "RIGHT" ~ (time.with.right.object.close),
novel.side == "LEFT" ~ (time.with.left.object.close)
)))
my.data <- my.data %>% mutate(time.with.familiar.object = (case_when(
novel.side == "RIGHT" ~ (time.with.left.object.close),
novel.side == "LEFT" ~ (time.with.right.object.close)
)))
my.data <- my.data %>% mutate(novel.object.preference.proportion = (time.with.novel.object / (time.with.novel.object + time.with.familiar.object)))
my.data <- my.data %>% mutate(novel.object.preference.gaussian = (time.with.novel.object - time.with.familiar.object))
novel.phase.data <- my.data %>% filter(trial.type == "novel")
# Chunk 3: model 1
nor.model.1 <- glm(novel.object.preference.proportion ~ trial.type,
data = my.data,
family = "quasibinomial"
)
# Chunk 4
# Summary of model 1
model1.effects <- as.data.frame(allEffects(nor.model.1))
# This is needed to get the model output in a format that can be referenced later
nor.model.1.tidy_fit <- broom.mixed::tidy(nor.model.1)
# nor.model.1.tidy_fit <- rename_tidy_lme4_cols(nor.model.1.tidy_fit) quasibinomial is not T statistic
# Chunk 5
knitr::kable(nor.model.1.tidy_fit %>%
mutate_if(is.numeric, round, digits = 3))
# Chunk 6: model 2
nor.model.2 <- t.test(novel.phase.data$novel.object.preference.proportion,
mu = 0.5,
alternative = "two.sided"
)
# Chunk 7
# Summary of model 2
nor.model.2
# This formats the p-value depending on whether it is less than 0.001. If that is true
# it will just report p < .001 otherwise it will give the exact value rounded to 3 decimal points
nor.model.2.formatted_p = ifelse(nor.model.2$p.value < .001, ## Condition
"< .001",  ## if condition is true
paste("=", nor.model.2$p.value %>% round(3))) ## if condition is false
# Chunk 8
nor.model.2
# Chunk 9: novel-object-recognition-plot1
pal=pnw_palette("Bay",2, type = "discrete")
nor.plot.x.axis.labels = c("Object is familiar", "Object is now novel")
ggplot(my.data, aes(trial.type, novel.object.preference.proportion, color = trial.type)) +
labs(x = NULL, y = "Change in novelty preference") +
theme_cowplot() + ylab('Preference for side with novel object') + xlab('')  + theme(legend.position = "none") +theme(axis.text=element_text(size=13),axis.title=element_text(size=16,face="bold"), plot.title = element_text(size=13, hjust=0.5)) + geom_jitter(size = 2, alpha = .4, width = 0) + geom_hline(yintercept = 0.5, color = "black", alpha = 0.7, size = 0.6, linetype = 'dashed') + stat_summary(
geom = "point",
fun = "mean",
size = 4.5,
shape = 15,
fill = "red"
) +
stat_summary(
geom = "errorbar",
fun.data = 'mean_ci', position = position_dodge(width=0), width = 0.1) +
scale_x_discrete(labels = nor.plot.x.axis.labels) + geom_line(aes(group = id), alpha = 0.5, color = 'grey') +
scale_color_manual(values=pal) + ylim(-0.05,1.05)
# Chunk 10: esm model 1
esm.model.1 <- glm((novel.object.preference.proportion) ~ trial.type * object.type,
data = my.data,
family = "quasibinomial"
)
esmmodel1.effects = as.data.frame(allEffects(esm.model.1))
knitr::kable(esmmodel1.effects %>%
mutate_if(is.numeric, round, digits = 3))
esmmodel1.effects = as.data.frame(allEffects(esm.model.1))
knitr::kable(esmmodel1.effects)
esmmodel1.effects = as.data.frame(allEffects(esm.model.1))
knitr::kable(esmmodel1.effects %>%
mutate_if(is.numeric, round, digits = 3))
esmmodel1.effects = as.data.frame(allEffects(esm.model.1 %>%
mutate_if(is.numeric, round, digits = 3)))
knitr::kable(esmmodel1.effects)
esmmodel1.effects = as.data.frame(allEffects(esm.model.1 %>%
mutate_if(is.numeric, round, digits = 3)))
knitr::kable(esmmodel1.effects)
esmmodel1.effects = as.data.frame(allEffects(esm.model.1) %>%
mutate_if(is.numeric, round, digits = 3))
knitr::kable(esmmodel1.effects)
esmmodel1.effects = as.data.frame(allEffects(esm.model.1))
knitr::kable(esmmodel1.effects)
pilot.data = read.csv('data/shfiting-object-preferences-data.csv')
