broom.mixed::tidy(female_preference_model)
preference_model <-
lm(time.with.trained.object ~ trial * object.colour,
data = preference_data
)
broom.mixed::tidy(preference_model)
symmary(preference_model)
summary(preference_model)
summary(female_preference_model)
preference_model <-
lm(rewarding.object.preference ~ trial * object.colour,
data = preference_data
)
preference_model
summary(preference_model)
preference_model <-
lm(rewarding.object.preference ~ trial * object.colour * sex,
data = preference_data
)
preference_model <-
lm(rewarding.object.preference ~ trial * object.colour * sex + (1 | id),
data = preference_data
)
preference_model <-
lmer(rewarding.object.preference ~ trial * object.colour * sex + (1 | id),
data = preference_data
)
# Extract males only
male_preference_data <- preference_data %>% filter(sex == "M")
male_preference_model <-
lm(time.with.trained.object ~ trial * object.colour,
data = male_preference_data
)
summary(male_preference_model)
male_preference_model <-
lmer(time.with.trained.object ~ trial * object.colour + (1 | id),
data = male_preference_data
)
summary(male_preference_model)
female_preference_model <-
lm(time.with.trained.object ~ trial * object.colour + (1 | id),
data = female_preference_data
)
female_preference_model <-
lmer(time.with.trained.object ~ trial * object.colour + (1 | id),
data = female_preference_data
)
male_preference_model <-
lmer(rewarding.object.preference ~ trial * object.colour + (1 | id),
data = male_preference_data
)
summary(male_preference_model)
female_preference_model <-
lmer(rewarding.object.preference ~ trial * object.colour + (1 | id),
data = female_preference_data
)
# Chunk 1: library-prep
library(PNWColors)
library(lme4)
library(tidyr)
library(lmerTest)
library(ggplot2)
library(ggpubr)
library(DHARMa)
library(dplyr)
library(effects)
library(broom)
library(broom.mixed)
library(knitr)
library(tidyext)
library(emmeans)
library(kableExtra)
library(cowplot)
source('R/rename-lme4-model.R')
source('R/format-p-value.R')
# Chunk 2: color-palette
# Getting tableau colour palette
red <- "#e15759"
purple <- "#b07aa1"
yellow <- "#edc948"
orange <- "#f28e2b"
blue <- "#4e79a7"
pink <- "#ff9da7"
lblue <- "#76b7b2"
green <- "#59a14f"
grey <- "#bab0ac"
white <- "#D0D3D4"
# Storing colour values
color_values <- c(blue, green, grey, orange, purple, red, white, yellow)
# Chunk 3: data-import
# Reading in data
preference_data <- read.csv("data/shfiting-object-preferences-data.csv")
# Set trial to factor
preference_data$trial <- as.factor(preference_data$trial)
# Chunk 4: id-data-check
checked_id_data <-
describe_all_cat(preference_data) %>%
filter(Variable == "id")
# Chunk 5: show-id-data-check
kable(
checked_id_data %>%
arrange(Frequency),
caption = "Scrollable table of the number of observations for each individual ID and the
percent contribution that individual ID makes to the total number of
observations in the data set."
) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "300px")
# Chunk 6: data-check-categorical
checked_cat_dat <-
describe_all_cat(preference_data) %>%
filter(Variable != "id" & Variable != "trained.object")
# Chunk 7: show-data-check-categorical
kable(
checked_cat_dat,
caption = "The number of observations for each level of the categorical variables,
'trial', 'object colour', 'sex', and 'object side' as well as the
percent contribution a particular level of a factor makes to the total number of
observations in the factor."
) %>%
kable_styling()
# Chunk 8: data-prep
# Making new variables
## Creating 'time with trained object'
preference_data <- preference_data %>%
mutate(
time.with.trained.object =
case_when(
trained.object.side == "R" ~ time.with.right.object,
trained.object.side == "L" ~ time.with.left.object
)
)
## Creating 'time with untrained object'
preference_data <- preference_data %>%
mutate(
time.with.untrained.object =
case_when(
trained.object.side == "L" ~ time.with.right.object,
trained.object.side == "R" ~ time.with.left.object
)
)
## Creating 'rewarding object preference'
preference_data <- preference_data %>%
mutate(
rewarding.object.preference =
(time.with.trained.object - time.with.untrained.object)
)
## Creating 'proportional rewarding object preference'
preference_data <- preference_data %>%
mutate(
rewarding.object.preference.prop =
(
time.with.trained.object / (time.with.trained.object + time.with.untrained.object)
)
)
## Creating 'time.with.both.objects'
preference_data <- preference_data %>%
mutate(
time.with.both.objects = (time.with.left.object + time.with.right.object)
)
# Chunk 9: extract-females
# Extract females only
female_preference_data <- preference_data %>% filter(sex == "F")
# Extract males only
male_preference_data <- preference_data %>% filter(sex == "M")
preference_model <-
lmer(rewarding.object.preference ~ trial * object.colour + (1 | id),
data = preference_data
)
preference_model
# Tidy model 1
tidy_preference_model <- broom.mixed::tidy(preference_model)
# Format p value
tidy_preference_model$p.value <- format_p_value(tidy_preference_model$p.value)
# Rename columns
tidy_preference_model <- rename_tidy_lme4_cols(tidy_preference_model)
tidy_preference_model
car::Anova(preference_model)
car::Anova(preference_model, type = "III")
preference_model <-
lmer(rewarding.object.preference ~ object.colour * trial + (1 | id),
data = preference_data
)
car::Anova(preference_model, type = "III")
car::Anova(preference_model, type = "II")
lmerTest::ranova(preference_model)
anova(preference_model)
car::Anova(preference_model)
lmerTest::anova(preference_model)
both_objects_model <-
lmer(time.with.both.objects ~ trial * object.colour + (1 | id),
data = preference_data
)
summary(both_objects_model)
# Chunk 1: library-prep
library(PNWColors)
library(lme4)
library(tidyr)
library(lmerTest)
library(ggplot2)
library(ggpubr)
library(DHARMa)
library(dplyr)
library(effects)
library(broom)
library(broom.mixed)
library(knitr)
library(tidyext)
library(emmeans)
library(kableExtra)
library(cowplot)
source('R/rename-lme4-model.R')
source('R/format-p-value.R')
# Chunk 2: color-palette
# Getting tableau colour palette
red <- "#e15759"
purple <- "#b07aa1"
yellow <- "#edc948"
orange <- "#f28e2b"
blue <- "#4e79a7"
pink <- "#ff9da7"
lblue <- "#76b7b2"
green <- "#59a14f"
grey <- "#bab0ac"
white <- "#D0D3D4"
# Storing colour values
color_values <- c(blue, green, grey, orange, purple, red, white, yellow)
# Chunk 3: data-import
# Reading in data
preference_data <- read.csv("data/shfiting-object-preferences-data.csv")
# Set trial to factor
preference_data$trial <- as.factor(preference_data$trial)
# Chunk 4: id-data-check
checked_id_data <-
describe_all_cat(preference_data) %>%
filter(Variable == "id")
# Chunk 5: show-id-data-check
kable(
checked_id_data %>%
arrange(Frequency),
caption = "Scrollable table of the number of observations for each individual ID and the
percent contribution that individual ID makes to the total number of
observations in the data set."
) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "300px")
# Chunk 6: data-check-categorical
checked_cat_dat <-
describe_all_cat(preference_data) %>%
filter(Variable != "id" & Variable != "trained.object")
# Chunk 7: show-data-check-categorical
kable(
checked_cat_dat,
caption = "The number of observations for each level of the categorical variables,
'trial', 'object colour', 'sex', and 'object side' as well as the
percent contribution a particular level of a factor makes to the total number of
observations in the factor."
) %>%
kable_styling()
# Chunk 8: data-prep
# Making new variables
## Creating 'time with trained object'
preference_data <- preference_data %>%
mutate(
time.with.trained.object =
case_when(
trained.object.side == "R" ~ time.with.right.object,
trained.object.side == "L" ~ time.with.left.object
)
)
## Creating 'time with untrained object'
preference_data <- preference_data %>%
mutate(
time.with.untrained.object =
case_when(
trained.object.side == "L" ~ time.with.right.object,
trained.object.side == "R" ~ time.with.left.object
)
)
## Creating 'rewarding object preference'
preference_data <- preference_data %>%
mutate(
rewarding.object.preference =
(time.with.trained.object - time.with.untrained.object)
)
## Creating 'proportional rewarding object preference'
preference_data <- preference_data %>%
mutate(
rewarding.object.preference.prop =
(
time.with.trained.object / (time.with.trained.object + time.with.untrained.object)
)
)
## Creating 'time.with.both.objects'
preference_data <- preference_data %>%
mutate(
time.with.both.objects = (time.with.left.object + time.with.right.object)
)
# Chunk 9: extract-females
# Extract females only
female_preference_data <- preference_data %>% filter(sex == "F")
# Extract males only
male_preference_data <- preference_data %>% filter(sex == "M")
# Chunk 10: full-model-1
preference_model <-
lm(rewarding.object.preference ~ trial * object.colour,
data = preference_data
)
# Chunk 11: tidying-model-1
# Tidy model 1
tidy_preference_model <- broom.mixed::tidy(preference_model)
# Format p value
tidy_preference_model$p.value <- format_p_value(tidy_preference_model$p.value)
# Rename columns
tidy_preference_model <- rename_tidy_lme4_cols(tidy_preference_model)
# Chunk 12: getting-model-1-effects
# Getting model parameters with 'emmeans' package
tidy_preference_model_emmeans <- emmeans::emmeans(preference_model,
specs = ~ trial:object.colour
)
# # Model results
knitr::kable(tidy_preference_model %>%
dplyr::mutate_if(is.numeric, round, digits = 3)) %>%
kable_styling()
tidy_preference_model_emmeans
# Getting model parameters with 'emmeans' package
preference_model_emmeans <- emmeans::emmeans(preference_model,
specs = ~ trial:object.colour
)
preference_model_emmeans
preference_model_emmeans %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean))
as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean))
as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean)) %>%
colnames[1:2] <- c("Object colour", "Change in rewarding object preference")
as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean)) %>%
(colnames[1:2] <- c("Object colour", "Change in rewarding object preference"))
as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean)) %>%
colnames()
?rename
as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean)) %>%
rename('Object colour' = 1)
as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean)) %>%
rename("Object colour" = 1, )
as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean)) %>%
rename("Trained object colour" = 1, "Change in trained object preference")
as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean)) %>%
rename("Trained object colour" = 1, "Change in trained object preference" = 2)
styler:::style_selection()
library(PNWColors)
library(lme4)
library(tidyr)
library(lmerTest)
library(ggplot2)
library(ggpubr)
library(DHARMa)
library(dplyr)
library(effects)
library(broom)
library(broom.mixed)
library(knitr)
library(tidyext)
library(emmeans)
library(kableExtra)
library(cowplot)
source('R/rename-lme4-model.R')
source('R/format-p-value.R')
# Getting tableau colour palette
red <- "#e15759"
purple <- "#b07aa1"
yellow <- "#edc948"
orange <- "#f28e2b"
blue <- "#4e79a7"
pink <- "#ff9da7"
lblue <- "#76b7b2"
green <- "#59a14f"
grey <- "#bab0ac"
white <- "#D0D3D4"
# Storing colour values
color_values <- c(blue, green, grey, orange, purple, red, white, yellow)
# Reading in data
preference_data <- read.csv("data/shfiting-object-preferences-data.csv")
# Set trial to factor
preference_data$trial <- as.factor(preference_data$trial)
checked_id_data <-
describe_all_cat(preference_data) %>%
filter(Variable == "id")
kable(
checked_id_data %>%
arrange(Frequency),
caption = "Scrollable table of the number of observations for each individual ID and the
percent contribution that individual ID makes to the total number of
observations in the data set."
) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "300px")
checked_cat_dat <-
describe_all_cat(preference_data) %>%
filter(Variable != "id" & Variable != "trained.object")
kable(
checked_cat_dat,
caption = "The number of observations for each level of the categorical variables,
'trial', 'object colour', 'sex', and 'object side' as well as the
percent contribution a particular level of a factor makes to the total number of
observations in the factor."
) %>%
kable_styling()
# Making new variables
## Creating 'time with trained object'
preference_data <- preference_data %>%
mutate(
time.with.trained.object =
case_when(
trained.object.side == "R" ~ time.with.right.object,
trained.object.side == "L" ~ time.with.left.object
)
)
## Creating 'time with untrained object'
preference_data <- preference_data %>%
mutate(
time.with.untrained.object =
case_when(
trained.object.side == "L" ~ time.with.right.object,
trained.object.side == "R" ~ time.with.left.object
)
)
## Creating 'rewarding object preference'
preference_data <- preference_data %>%
mutate(
rewarding.object.preference =
(time.with.trained.object - time.with.untrained.object)
)
## Creating 'proportional rewarding object preference'
preference_data <- preference_data %>%
mutate(
rewarding.object.preference.prop =
(
time.with.trained.object / (time.with.trained.object + time.with.untrained.object)
)
)
## Creating 'time.with.both.objects'
preference_data <- preference_data %>%
mutate(
time.with.both.objects = (time.with.left.object + time.with.right.object)
)
preference_model <-
lm(rewarding.object.preference ~ trial * object.colour,
data = preference_data
)
# Tidy model 1
tidy_preference_model <- broom.mixed::tidy(preference_model)
# Format p value
tidy_preference_model$p.value <- format_p_value(tidy_preference_model$p.value)
# Rename columns
tidy_preference_model <- rename_tidy_lme4_cols(tidy_preference_model)
# Model 1 results
knitr::kable(tidy_preference_model %>%
dplyr::mutate_if(is.numeric, round, digits = 3),
caption = "Linear mixed effect model results") %>%
kable_styling()
# Getting model estimated marginal means with 'emmeans' package
preference_model_emmeans <- emmeans::emmeans(preference_model,
specs = ~ trial:object.colour
)
# Subtracting final test trial emmean from the initial test trial emmean
change_in_object_preference_emmeans <- as.data.frame(preference_model_emmeans) %>%
group_by(object.colour) %>%
summarise(last(emmean) - first(emmean)) %>%
rename("Trained object colour" = 1, "Change in trained object preference" = 2)
kable(change_in_object_preference_emmeans) %>%
kable_styling()
str(preference_data)
lm(rewarding.object.preference ~ trial,
data = preference_data
)
summary( lm(rewarding.object.preference ~ trial,
data = preference_data
))
summary( lm(time.with.trained.object ~ trial,
data = preference_data
))
summary( lm(time.with.both.objects ~ trial,
data = preference_data
))
summary( lm(distance.moved ~ trial,
data = preference_data
))
summary( lm(time.in.periphery ~ trial,
data = preference_data
))
# Reading in data
preference_data <- read.csv("data/shfiting-object-preferences-data.csv")
# Set trial to factor
preference_data$trial <- as.factor(preference_data$trial)
View(preference_data)
